--Air Cargo is an aviation company that provides air transportation services for passengers and freight. Air Cargo uses its aircraft 
to provide different services with the help of partnerships or alliances with other airlines. The company wants to 
prepare reports on regular passengers, busiest routes, ticket sales details, and other scenarios 
to improve the ease of travel and booking for customers.


--route_details table using suitable data types;

CREATE TABLE airline.routes(
route_id INT NOT NULL UNIQUE,
flight_num INT NOT NULL,
origine_airport VARCHAR(3) NOT NULL,
destination_airport VARCHAR(3) NOT NULL,
aircraft_id VARCHAR(50) NOT NULL,
distance_miles INT NOT NULL,
CONSTRAINTS flight_number_check CHECK((substr(flight_num,1,2)=11)),
CONSTRAINTS distance_miles_check CHECK(distance_miles>0)

);



--a query to display all the passengers(customers) who have traveled on routes 01 to 25;

SELECT customer_id
FROM airline_details.passengers_on_flights
WHERE route_id BETWEEN 01 and 25;


--write a query to identify the number of passengers and total revenue in business class;

SELECT COUNT(customer_id) as total_passengers,
SUM(price_per_ticket) as total_revenue
FROM airline.ticket_details
WHERE class_id = 'Bussiness' ;


--write a query to display the full name of the customer by extracting the first name and last name from the customer table

SELECT CONCAT(first_name,'',last_name) as full_name
FROM airline_details.customer;


--write a query to extract the customers who have registered and booked a ticket.Use data from the customer and ticket_details tables;


SELECT c.first_name, c.last_name 
FROM air_cargo.customer c
INNER JOIN air_cargo.ticket_details t ON c.customer_id = t.customer_id;

--write a query to identify the customer's first name and last name based on their customer ID and brand(Emirates) from the ticktes_details table.

SELECT c.first_name, c.last_name, 
FROM air_cargo.customer c
INNER JOIN air_cargo.ticket_details t
ON c.customer_id = t.customer_id
WHERE brand = 'Emirates';

--write a query to identify the customers who have traveled by Economy Plus class using Group By and Having clasue on the passengers_on_flights table.
SELECT customer_id FROM passengers_on_flights
GROUP BY  customer_id,class_id 
HAVING class_id= 'Economy Plus';

--write a query to identify whether the revenue has crossed 10000 using the IF clause on the ticket_details table.

DROP PROCEDURE IF EXISTS TOTAL_REVENUE;
DELIMITER $$
CREATE PROCEDURE TITAL_REVENUE()
BEGIN
DECLARE revenue INT DEFAULT 0;
DECLARE performance VARCHAR(50);
SELECT SUM(no_of_tickets*price_per_ticket) INTO revenue
FROM airline_details.ticket_details;
IF revenue>10000 Then
   SET performance = 'OUTSTANDING';
END IF;
SELECT performance ;
END$$

CALL 'airline_details.TOTAL_REVENUE()';


--write a query to create and grant access to a new user to perform operation on a database.

CREATE USER Anindita@localhost
IDENTIFIED BY 'anindita123'
GRANT EXECUTE ON my_db1. TO Anindita@localhost;


--write a query to find maximum tickets price for each class using window functions;

SELECT class_id,
MAX(Price_per_ticket) OVER(PARTITION BY class_id) AS max_ticket_price_per_class
FROM airline_details.ticket_details;


--write a query to extract the passengers whose route ID is 4 by improving the the speed and performanceof the passengers_on_flights table


CREATE INDEX idx_routes ON Passengers_on_flights(route_id);
SELECT customer_id
FROM passengers_on_flights
WHERE route_id = '4';


--write a query to calculate the total price of all the tickets booked by a customer across different aircraft IDs using the ROLLUP
SELECT class_id,COUNT(price_per_ticket) AS total_price
FROM ticket_details
GROUP BY class_id wih ROLLUP;


--write a query to create a view with only business class customers along with the brand of airlines.


CREATE VIEW ticket_details_view AS 
SELECT class_id,brand
FROM ticket_details
GROUP BY class_id;

SELECT * FROM ticket_details_view;

--write a query to create a stored procedure that extracts all the details from the routes table where the traveled distance is more than 2000 miles

DROP PROCEDURE IF EXISTS MAX_DISTANCE;
DELIMITER $$
CREATE PROCEDURE MAX_DISTANCE()
BEGIN
SELECT * FROM airline_details.routes
WHERE distance_miles>2000;
END$$
CALL ''airline_details.'MAX_DISTANCE()';

--Write a query to create a stored procedure that groups the distance traveled by each flight into three categories. The categories are, short distance travel (SDT) for >=0 AND <= 2000 miles, intermediate distance 
travel (IDT) for >2000 AND <=6500, and long-distance travel (LDT) for >6500


DELIMITER $$
CREATE PROCEDURE distance_info(IN rid INT)
BEGIN
DECLARE distance INT DEFAULT 0;
DECLARE category VARCHAR(50);
SELECT distance_miles INTO distance
FROM routes
WHERE route_id = rid;
IF distance BETWEEN '>=0' AND '<=2000' THEN
SET category = 'short distance travel(SDT)'
ELSEIF distance BETWEEN '>2000' AND '<=6500' THEN
SET category = 'OTHERS';
ELSE
SET category = 'OTHERS';
END IF;
SELECT category;
CALL 'airline_details'.'distance_info'(46);

--Write a query to create a stored procedure that groups the distance traveled by each flight into three categories. The categories are, short distance travel (SDT) for >=0 AND <= 2000 miles, intermediate distance 
travel (IDT) for >2000 AND <=6500, and long-distance travel (LDT) for >6500

DELIMITER $$
CREATE PROCEDURE ticket_info(IN cid INT)
BEGIN
DECLARE complimentary_services VARCHAR(3);
SELECT p_date,customer_id,class_id
FROM ticket_details
WHERE customer_id = cid;
IF class_id = 'Economy Plus'
AND 'Business' THEN
SET complimentary_services = 'Yes'
ELSE
SET complimentary_services = 'No'
END IF;
SELECT complimentary_services;
END$$


 






